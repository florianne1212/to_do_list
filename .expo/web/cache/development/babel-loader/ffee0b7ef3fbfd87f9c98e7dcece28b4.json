{"ast":null,"code":"","map":{"version":3,"sources":[],"names":[],"mappings":"","sourcesContent":["// import { MaterialIcons } from \"@expo/vector-icons\";\n// import { StatusBar } from 'expo-status-bar';\n// import React, {useState} from 'react';\n// import { StyleSheet, Text, View,ScrollView, KeyboardAvoidingView, Platform, TextInput, TouchableOpacity, Keyboard, FlatList  } from 'react-native';\n// import BouncyCheckbox from \"react-native-bouncy-checkbox\";\n// import { connect } from 'react-redux';\n// import { addTask, deleteTask} from '../redux/action';\n\n// const HomeTodo =  ({ todo_list, addTask, deleteTask }) => {\n\n\n//   const [task, setTask] = useState();\n\n//   const [taskItems, setTaskItems] = useState([]);\n\n//   let myHeight = 50;\n\n//   const handleAddTask = () => {\n//     Keyboard.dismiss();\n// \taddTask(task)\n// \tsetSelection(true);\n//     setTask(null);\n//   }\n\n//   const completeTask = (index) => {\n//     deleteTask(id)\n//   }\n\n//   const [isSelected, setSelection] = useState(false);\n\n\n//   return (\n//     <View style={styles.container}>\n//       <View style={styles.tasksWrapper}>\n//         <Text style={styles.sectionTitle}>Today's tasks</Text>\n\n//       </View>\n\n// \t  {/* <ScrollView>\n//       <View style={styles.items}>\n//         {\n//           taskItems.map((item, index) => {\n//             return (\n// \t\t\t\t<View style={styles.item}>\n// \t\t\t\t<View style={styles.itemLeft}>\n// \t\t\t\t\t<View > \n// \t\t\t\t\t<BouncyCheckbox\n// \t\t\t\t\t\tsize={25}\n// \t\t\t\t\t\tfillColor=\"#188078\"\n// \t\t\t\t\t\ticonStyle={{ borderColor: \"#188078\" }}\n// \t\t\t\t\t/>\n// \t\t\t\t\t</View>\n// \t\t\t\t</View>\n// \t\t\t\t<Text style={styles.text}>{item}</Text>\n// \t\t\t\t<TouchableOpacity key={index} onPress={() => completeTask(index)}>\n// \t\t\t\t\t\t<MaterialIcons name=\"delete\" size={25} color=\"#188078\" />\n// \t\t\t\t</TouchableOpacity>\n// \t\t\t\t</View>\n//             ) \n//           })\n//         }\n//       </View>\n// \t  </ScrollView> */}\n\n// \t\t<FlatList\n// \t\t\t\tdata={todo_list}\n// \t\t\t\tkeyExtractor={(item) => item.id}\n// \t\t\t\trenderItem={({item, index}) => {\n// \t\t\t\treturn (\n\n// \t\t\t\t\t<View style={styles.item}>\n// \t\t\t\t\t<View style={styles.itemLeft}>\n// \t\t\t\t\t\t<View > \n// \t\t\t\t\t\t<BouncyCheckbox\n// \t\t\t\t\t\t\tsize={25}\n// \t\t\t\t\t\t\tfillColor=\"#188078\"\n// \t\t\t\t\t\t\ticonStyle={{ borderColor: \"#188078\" }}\n// \t\t\t\t\t\t/>\n// \t\t\t\t\t\t</View>\n// \t\t\t\t\t</View>\n// \t\t\t\t\t<Text style={styles.text}>{item}</Text>\n// \t\t\t\t\t<TouchableOpacity key={index} onPress={() => completeTask(item.task)}>\n// \t\t\t\t\t\t\t<MaterialIcons name=\"delete\" size={25} color=\"#188078\" />\n// \t\t\t\t\t</TouchableOpacity>\n// \t\t\t\t\t</View>\n// \t\t\t\t\t// <>\n// \t\t\t\t\t// <Card>\n// \t\t\t\t\t// <Card.Title\n// \t\t\t\t\t// \ttitle={`Task#${item.id}`}\n// \t\t\t\t\t// \tleft={(props) => <Icon name=\"tasks\" size={24} color=\"black\" />}\n// \t\t\t\t\t// \tright={(props) => <ButtonIcon iconName=\"close\" color=\"red\" onPress={() => handleDeleteTodo(item.id)} />}\n// \t\t\t\t\t// />\n// \t\t\t\t\t// <Card.Content>\n// \t\t\t\t\t// \t<Paragraph>{item.task}</Paragraph>\n// \t\t\t\t\t// </Card.Content>\n// \t\t\t\t\t// </Card>\n// \t\t\t\t\t// <Spacer />\n// \t\t\t\t\t// </>\n// \t\t\t\t);\n// \t\t\t\t}}\n// \t\t/>\n\n//       <KeyboardAvoidingView \n//         behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\n//         style={styles.writeTasksWrapper}\n//       >\n//         <TextInput style={styles.input} placeholder={\"Write a task\"} value={task} onChangeText={text => setTask(text)} />\n\n//         <TouchableOpacity onPress={() => handleAddTask()}>\n//           <View style={styles.addWrapper}>\n//             <Text style={styles.addText}>+</Text>\n\n//           </View>\n//         </TouchableOpacity>\n\n//       </KeyboardAvoidingView>\n//     </View>\n//   );\n// }\n\n// const styles = StyleSheet.create({\n// \titem: {\n// \t\tmargin: \"auto\",\n// \t\tmarginLeft: 10,\n// \t\tmaxHeight: \"80%\",\n// \t\twidth: \"95%\",\n// \t\tmaxWidth: \"95%\",\n//         backgroundColor: '#FFF',\n//         padding: 15,\n//         borderRadius: 20,\n//         flexDirection: 'row',\n//         alignItems: \"center\",\n//         justifyContent: \"space-between\",\n// \t\tmarginBottom: 20,\n// \t\toverflow: \"scroll\"\n//     },\n//     itemLeft: {\n//         flexDirection: 'row',\n//         alignItems: \"center\",\n//         flexWrap: 'wrap'\n//     },\n//     text: {\n// \t\tmarginTop: \"auto\",\n// \t\twidth: \"75%\",\n// \t\theight: \"auto\",\n// \t\tfontSize: 20,\n// \t\tmarginRight: 20\n//     },\n// \tcontainer: {\n// \t\tflex: 1,\n// \t\toverflow: \"scroll\",\n// \t\tbackgroundColor: '#188078',\n\t\n// \t  },\n// \t  tasksWrapper: {\n// \t\tpaddingTop: 80,\n// \t\tpaddingHorizontal: 20\n\t\n// \t  },\n// \t  sectionTitle: {\n// \t\tcolor: '#FFFFFF',\n// \t\tfontSize: 24,\n// \t\tfontWeight: 'bold'\n// \t  },\n// \t  items: {\n// \t\tmarginTop: 30,\n// \t\tmarginBottom: 85,\n// \t  },\n// \t  writeTasksWrapper : {\n// \t\twidth: \"100%\",\n// \t\tbackgroundColor: \"#188078\",\n// \t\tposition: \"absolute\",\n// \t\theight: 90,\n// \t\tbottom: 0,\n// \t\tflexDirection: \"row\",\n// \t\tjustifyContent: \"space-around\",\n// \t\talignItems: \"center\"\n// \t  },\n// \t  input : {\n// \t\tmargin: 1,\n// \t\tmarginBottom: 5,\n// \t\tpaddingVertical: 15,\n// \t\tpaddingHorizontal: 15,\n// \t\theight: 50,\n// \t\twidth: 250,\n// \t\tbackgroundColor: \"#FFF\",\n// \t\tborderRadius: 20,\n// \t\tborderColor: \"#C0C0C0\",\n// \t\tborderwidth: 1\n// \t  },\n// \t  addWrapper: {\n// \t\tmarginBottom: 5,\n// \t\twidth: 60,\n// \t\theight: 50,\n// \t\tbackgroundColor: \"#FFF\",\n// \t\tborderRadius: 20,\n// \t\tjustifyContent: \"center\",\n// \t\talignItems: \"center\",\n// \t\tborderColor: \"#C0C0C0\",\n// \t\tborderwidth: 1\n// \t  },\n// \t  addText: {}\n// });\n\n// const mapStateToProps = (state, ownProps) => {\n// \treturn {\n// \t  todo_list: state.todos.todo_list,\n// \t}\n// }\n  \n// const mapDispatchToProps = { addTask, deleteTask }\n  \n// export default connect(\n// \tmapStateToProps,\n// \tmapDispatchToProps\n// )(HomeTodo)"]},"metadata":{},"sourceType":"script"}